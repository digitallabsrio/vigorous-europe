{
  "course_name": "Clean Architecture in Python - Learn Interactively",
  "course_overview": "Clean architecture is a software design methodology that separates the processes of an application into discrete steps instead of presenting them as “spaghetti code.” With the versatility of Python, software engineers can build performant, modular applications quickly using the Flask framework.\n\nThis course will help you build better applications using the principles of clean architecture. You’ll start with an introduction to data flow in clean systems and learn about the advantages of layered architectures. Next, you’ll learn system components and the connections between application layers. You’ll then design and build a clean system using Python by layering components in guided coding exercises. Finally, you’ll learn how to add functional components for the web, handle errors, and work with external databases using both Postgres and MongoDB. At each step, you’ll use test-driven development practices to ensure robust functionality.",
  "course_folder": "clean architecture in python",
  "course_lessons": [
    "0-introduction to the course",
    "1-clean architecture",
    "2-the data flow",
    "3-advantages of a layered architecture",
    "4-quiz",
    "5-divide and conquer",
    "6-data types",
    "7-the layers of clean architecture",
    "8-communication between layers",
    "9-apis and shades of gray",
    "10-quiz",
    "11-overview of rent o matic",
    "13-domain models",
    "14-serializers",
    "15-use cases",
    "16-storage system",
    "17-command line interface",
    "18-quiz",
    "19-overview of flask web server",
    "20-test and create an http endpoint",
    "21-web server gateway interface wsgi",
    "22-overview of error management",
    "23-requests and responses in a use case",
    "24-request validation",
    "25-responses and failures",
    "26-error management in a use case",
    "27-the http server",
    "28-the repository",
    "29-the cli",
    "30-quiz",
    "31-overview of postgresql",
    "32-decoupling with interfaces",
    "33-a repository based on postgresql",
    "34-label integration tests",
    "35-create sqlalchemy classes",
    "36-orchestration management",
    "37-database fixtures",
    "38-integration tests",
    "39-quiz",
    "40-overview of mongodb",
    "41-fixtures and docker compose",
    "42-application configuration and integration tests",
    "43-the mongodb repository",
    "44-overview of the production ready system",
    "45-build a web stack",
    "46-connect to a production ready database",
    "47-migrations",
    "48-quiz",
    "49-flask setup"
  ],
  "repo_name": "vigorous-europe"
}
